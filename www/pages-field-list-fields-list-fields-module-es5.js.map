{"version":3,"sources":["webpack:///src/app/pages/field/list-fields/list-fields-routing.module.ts","webpack:///src/app/pages/field/list-fields/list-fields.module.ts","webpack:///src/app/services/util-array.service.ts"],"names":["routes","path","component","ListFieldsPageRoutingModule","imports","forChild","exports","ListFieldsPageModule","declarations","UtilArrayService","list","item","push","unshift","id","index","findIndexList","splice","find","findIndex","objectResult","object","attibutes","console","log","att","hasOwnProperty","providedIn"],"mappings":"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","file":"pages-field-list-fields-list-fields-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ListFieldsPage } from './list-fields.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ListFieldsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ListFieldsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ListFieldsPageRoutingModule } from './list-fields-routing.module';\n\nimport { ListFieldsPage } from './list-fields.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ListFieldsPageRoutingModule\n  ],\n  declarations: [ListFieldsPage]\n})\nexport class ListFieldsPageModule {}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilArrayService {\n\n  constructor() { }\n\n  /**\n   * Inserta el elemento al final del array\n   * @param list array en el que se inserta el objeto\n   * @param item item a insertar\n   */\n\n  listAddLast(list,item){\n    list.push(item);\n  }\n\n  /**\n   * AÃ±ade un elemente en el array al inicio\n   * @param list array en la que se inserta el objeto\n   * @param item  elemento que se almacenara en el array\n   */\n  listAddFirst(list,item){\n    list.unshift(item);\n  }\n\n  /**\n   * Remplaza un objeto del array\n   * @param list array que se actualizara\n   * @param id iel id del objeto\n   * @param item elemento que se remplazara en el array\n   */\n  listUpdate(list,id,item){\n    let index = this.findIndexList(list,id);\n    if(index >= 0){\n        list[index] = item ;\n    }\n  }\n\n  /**\n   * elimina objeto de un array pasando el id del objeto\n   * @param list array del que se eliminara el objeto\n   * @param id id del objeto\n   */\n  listDelete(list,id){\n    let index = this.findIndexList(list,id);\n    if(index >= 0)\n        list.splice(index, 1);\n  }\n\n  /**\n   * Busca un obeto en el array\n   * @param list array en el qie se bucara el objeto\n   * @param id id del objeto\n   */\n  findList(list, id){\n    return list.find(item => item['id'] === id);\n  }\n\n  /**\n   * Retorna el indice de la posicion en la que se encuentra el objeto\n   * @param list Array en el que se realizara a busqueda\n   * @param id id del objeto buscado\n   */\n  findIndexList(list,id){\n    return list.findIndex(item => item['id'] === id);\n  }\n\n  /**\n   * Modifica solo los atributos indicados en el array\n   * @param objectResult objeto a modificar\n   * @param object objeto del que se obtendran los datos\n   * @param attibutes atributos que seran modificados \n   */\n\n  updateAttribustesObject(objectResult : {} , object : {} , attibutes : string[] = []){\n    console.log('update attributes')\n    for(let att of attibutes){\n      if(object.hasOwnProperty(att))\n        objectResult[att] = object[att];\n    }\n\n    return objectResult;\n  }\n\n}\n"]}